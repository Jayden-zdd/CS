内存管理：
不像C和C++里用户自己管理维护内存方式，python采用垃圾回收机制
python采用的是引用计数机制为主，标记-清除和分收待集为辅的机制来回收内存

垃圾回收=垃圾检测+释放

#计数机制优缺点：
优点：简单，实时性
缺点：额外需要资源记录引用次数，而且不能解决循环引用

#标记-清楚方法：解决循环引用
只有容器才会出现循环引用，标记-清楚首先会将活动对象打上标记，然后将没有标记的非活动对象进行回收
怎么判断活动对象：对象之间通过引用连在一起，构成有向图，从根对象出发（全局变量，调用栈，寄存器）图中可达就是活动对象。
Python使用双向链表完成图的非活动对象检测，为什么要使用两个？
a=[1,3]
b=[2,4]
a.append(b)
b.append(a)
del a
root链表有b，其直接引用的是unreachable链表中的a，发现这种情况不能直接删除a，需要将其放回root标记完成后再删除unreachable中的
缺点：必须每次顺序扫描整个内存

#分代回收
GC阈值：创建所使用的对象内存永远比释放掉的内存对象多，当两者之差达到某个阈值之后就需要分代回收
新生对象放入0代（一共3代），如果对象在第0代的垃圾回收中存活下来，则进入第一代；
当某一代里面分配对象个数减去释放对象个数大于对应代数的阈值就开始垃圾回收
