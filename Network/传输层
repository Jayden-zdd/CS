
##IO

类型：同步阻塞IO、同步非阻塞IO、IO多路复用、信号驱动IO、异步IO
用户空间和内核空间，OSI下四层（物理、数据链路、网络、传输）对应内核空间，上面三层对应用户空间 
###同步阻塞IO 
应用程序系统调用，数据拷贝，等待结束，期间什么也不做（小明电话相约妹子在校门口，然后小明很专一、不见到妹子不回家，期间没有做任何事情，一直在等待！） 
###同步非阻塞IO 
每次调用后数据没有就绪就立即返回，之后重复调查IO操作是否就绪（小明电话相约妹子在校门口，妹子还没准备好（出门前化妆几小时。。。），这时候的小明很执着，每隔一会儿给妹子发个信息直到妹子准备好了。）
###IO多路复用：
整体意思也就是多个网络 I/O复用一个或少量的线程来处理Socket IO多路复用就是通过一种机制监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作
select不断线性遍历所有socket，最大限制1024个（小明电话相约妹子在校门口，委托门卫select大爷帮忙，select大爷很敬业每出去一个人都会进行询问，但是select大爷有个限制最多只能询问1024个）
poll基于链表实现遍历，解除最大1024限制，因为遍历性能还是低（poll类似于select功能，不同的是poll大爷没有1024限制，可以一直坚持，但是当poll大爷超过1024，询问的越来越多之后就显得越来越精疲力尽了。）
epoll通过callback回调通知机制，没有最大链接限制（小明电话相约妹子在校门口，委托门卫epoll大爷帮忙，epoll大爷不在是每个询问，规定每个人出入校门必须带上学生证，这样opoll大爷就是知道哪个是小明的女神了，epoll大爷找到女神之后在电话通知小明。）
###信号驱动IO
仅在Unix上实现，与IO多路复用相比避免了select的遍历查询（小明电话相约妹子在校门口，此时妹子回复说我还没准备好（出门前化妆几小时。。。），这个时候小明也没去，而是先去干其它事情了，等妹子准备好之后电话通知小明，我已经准备好了，小明这个时候才去校门口等着和妹子的约会）
###异步IO 
最理想，但很少系统实现（小明告诉妹子我们在校园门口相约，之后小明没有在那干等了，而是先回宿舍休息会或者和朋友在打会球等等，妹子到校门口之后电话通知小明，我已经来啦。）


三次握手
作用：确保客户端与服务端之间接受和发送能力是否正常
第一次握手：刚开始客户端属于cloesed(没有任何连接)的状态，服务端处于监听TCP端口的状态，客户端发送syn报文，并指明客户端初始化序列号ISN值，此时客户端处于syn_send状态
第二次握手：服务端接受到syn报文后，也会发送服务端的syn报文，同时发送ack报文回复给客户端，其中ack的序列号值就是客户端的ISN+1，此时服务端处于sys_recieved状态
第三次握手：客户端接受到syn报文和ack报文后，会发送一个Ack报文告诉服务端已经接受到了服务端的syn报文，其值同样等于服务端ISN+1，此时客户端处于established(打开连接，数据可以传送)状态。
服务器接受到Ack报文后也处于established状态

四次挥手
作用：客户端与服务端断开连接
第一次挥手：客户端发起关闭请求，然后发送finsh报文和报文指定序列号ISN值，此时客户端处于finish_wait状态
第二次挥手：服务端收到finish报文后同样返回Ack值，此时服务端处于close_wait状态
第三次挥手：如果服务端也想关闭，则和客户端一样发送finish报文内核ISN值
第四次挥手：客户端收到finish报文和Ack后关闭连接

